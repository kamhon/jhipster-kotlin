<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

import <%= packageName %>.domain.PersistentAuditEvent
<%_ if (!reactive) { _%>
import org.springframework.data.domain.Page
<%_ } _%>
import org.springframework.data.domain.Pageable

<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.data.jpa.repository.JpaRepository
<%_ } _%>
<%_ if (databaseType === 'sql' && reactive) { _%>
import org.springframework.data.r2dbc.core.DatabaseClient
import org.springframework.data.r2dbc.core.asType
import org.springframework.data.r2dbc.query.Criteria
import org.springframework.data.r2dbc.repository.Query
import org.springframework.data.r2dbc.repository.R2dbcRepository
import org.springframework.data.util.Pair
import org.springframework.stereotype.Repository
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.mongodb.repository.<% if (reactive) { %>Reactive<% } %>MongoRepository
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.repository.<% if (reactive) { %>Reactive<% } %>Neo4jRepository
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
<%_ } _%>
import java.time.Instant
<%_ if (databaseType === 'sql' && reactive) { _%>
import java.time.LocalDateTime
import java.time.ZoneOffset
<%_ } _%>

/**
 * Spring Data <% if (databaseType === 'sql' && !reactive) { %>JPA<% } else if (databaseType === 'sql' && reactive) { %>R2DBC<% } else if (databaseType === 'mongodb') { %>MongoDB<% } else if (databaseType === 'couchbase') { %>Couchbase<% } else if (databaseType === 'neo4j') { %>Neo4j<% } %> for the [PersistentAuditEvent] entity.
 */
<%_ if (databaseType === 'sql' && reactive) { _%>
@Repository
interface PersistenceAuditEventRepository: R2dbcRepository<PersistentAuditEvent, Long>, PersistenceAuditEventRepositoryInternal {

    @Query("INSERT INTO <%= jhiTablePrefix %>_persistent_audit_evt_data VALUES(:eventId, :name, :value)")
    fun savePersistenceAuditEventData(eventId: Long, name: String, value: String): Mono<Void>
}

interface PersistenceAuditEventRepositoryInternal {
<%_ } else { _%>
interface PersistenceAuditEventRepository : <% if (reactive) { %>Reactive<% } %><% if (databaseType === 'sql') { %>JpaRepository<PersistentAuditEvent, String><% } %><% if (databaseType === 'mongodb') { %>MongoRepository<% } %><% if (databaseType === 'neo4j') { %>Neo4jRepository<% } %><% if (databaseType === 'couchbase') { %>N1qlCouchbaseRepository<% } %><% if (databaseType === 'mongodb' || databaseType === 'couchbase' || databaseType === 'neo4j') { %><PersistentAuditEvent, String><% } %>  {
<%_ } _%>

    fun findByPrincipal(principal: String): <% if (reactive) { %>Flux<% } else { %>List<% } %><PersistentAuditEvent>

    <%_ if (!reactive) { _%>
    fun findByPrincipalAndAuditEventDateAfterAndAuditEventType(
        principal: String,
        after: Instant,
        type: String
    ): List<PersistentAuditEvent>
    <%_ } _%>

    fun findAllByAuditEventDateBetween(
        fromDate: Instant,
        toDate: Instant,
        pageable: Pageable
    ): <% if (reactive) { %>Flux<% } else { %>Page<% } %><PersistentAuditEvent>

    fun findByAuditEventDateBefore(before: Instant): <% if (reactive) { %>Flux<% } else { %>List<% } %><PersistentAuditEvent>
    <%_ if (reactive) { _%>

    fun findAllBy(pageable: Pageable): Flux<PersistentAuditEvent>

    fun countByAuditEventDateBetween(fromDate: Instant, toDate: Instant): Mono<Long>
    <%_ } _%>
}
<%_ if (databaseType === 'sql' && reactive) { _%>

class PersistenceAuditEventRepositoryInternalImpl(val databaseClient: DatabaseClient): PersistenceAuditEventRepositoryInternal {

    override fun findByPrincipal(principal: String) = 
        findAllByCriteria(Criteria.where("principal").`is`(principal))

    override fun findAllByAuditEventDateBetween(fromDate: Instant, toDate: Instant, pageable: Pageable):  Flux<PersistentAuditEvent> {
        // LocalDateTime seems to be the only type that is supported across all drivers atm
        // See https://github.com/r2dbc/r2dbc-h2/pull/139 https://github.com/mirromutth/r2dbc-mysql/issues/105
        val fromDateLocal = LocalDateTime.ofInstant(fromDate, ZoneOffset.UTC)
        val toDateLocal = LocalDateTime.ofInstant(toDate, ZoneOffset.UTC)
        val criteria = Criteria
            .where("event_date").greaterThan(fromDateLocal)
            .and("event_date").lessThan(toDateLocal)
        return findAllFromSpec(select().matching(criteria).page(pageable))
    }

    override fun findByAuditEventDateBefore(before: Instant): Flux<PersistentAuditEvent>{
        // LocalDateTime seems to be the only type that is supported across all drivers atm
        // See https://github.com/r2dbc/r2dbc-h2/pull/139 https://github.com/mirromutth/r2dbc-mysql/issues/105
        val beforeLocal = LocalDateTime.ofInstant(before, ZoneOffset.UTC)
        return findAllByCriteria(Criteria.where("event_date").lessThan(beforeLocal))
    }

    override fun findAllBy(pageable: Pageable): Flux<PersistentAuditEvent> =
        findAllFromSpec(select().page(pageable))

    override fun countByAuditEventDateBetween(fromDate: Instant, toDate: Instant): Mono<Long> {
        // LocalDateTime seems to be the only type that is supported across all drivers atm
        // See https://github.com/r2dbc/r2dbc-h2/pull/139 https://github.com/mirromutth/r2dbc-mysql/issues/105
        val fromDateLocal = LocalDateTime.ofInstant(fromDate, ZoneOffset.UTC);
        val toDateLocal = LocalDateTime.ofInstant(toDate, ZoneOffset.UTC);
        return databaseClient.execute("SELECT COUNT(DISTINCT event_id) FROM <%= jhiTablePrefix %>_persistent_audit_event " +
            "WHERE event_date > :fromDate AND event_date < :toDate")
            .bind("fromDate", fromDateLocal)
            .bind("toDate", toDateLocal)
            .asType<Long>()
            .fetch()
            .one()
    }

    private fun findAllByCriteria(criteria: Criteria) =
        findAllFromSpec(select().matching(criteria))

    private fun select() = databaseClient.select().from(PersistentAuditEvent::class.java)

    private fun findAllFromSpec(spec: DatabaseClient.TypedSelectSpec<PersistentAuditEvent>): Flux<PersistentAuditEvent> =
        spec.`as`(PersistentAuditEvent::class.java).all()
        .flatMap {event ->
                findAllEventData(event.id!!)
                    .map {
                        event.data = it
                        event
                    }
        }


    private fun findAllEventData(id: Long): Mono<MutableMap<String, String?>> = databaseClient.select().from("<%= jhiTablePrefix %>_persistent_audit_evt_data")
        .project("name", "value")
        .matching(Criteria.where("event_id").`is`(id))
        .map { row ->
            Pair.of(row.get("name", String::class.java) ?: "", row.get("value", String::class.java) ?: "")
        }
        .all()
        .collectMap(Pair<String, String?>::getFirst, Pair<String, String?>::getSecond)
}
<%_ } _%>
