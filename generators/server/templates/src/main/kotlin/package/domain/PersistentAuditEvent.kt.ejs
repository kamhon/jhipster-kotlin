<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain

<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Document
import org.springframework.data.mongodb.core.mapping.Field
<%_ } else if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.core.schema.GeneratedValue
import org.neo4j.springframework.data.core.schema.Id
import org.neo4j.springframework.data.core.schema.Node
import org.neo4j.springframework.data.core.schema.Property
import org.neo4j.springframework.data.core.schema.Relationship
import org.neo4j.springframework.data.core.support.UUIDStringGenerator
import org.springframework.data.annotation.Transient
<%_ } else if (databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id
import com.couchbase.client.java.repository.annotation.Field
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
<%_ } else if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
import org.springframework.data.annotation.PersistenceConstructor
import org.springframework.data.annotation.Id
import org.springframework.data.annotation.Transient
import org.springframework.data.relational.core.mapping.Column
import org.springframework.data.relational.core.mapping.Table
    <%_ } else { _%>
import javax.persistence.CollectionTable
import javax.persistence.Column
import javax.persistence.ElementCollection
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.JoinColumn
import javax.persistence.MapKeyColumn
import org.hibernate.annotations.GenericGenerator;
        <%_ if (!(prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb')) { _%>
import javax.persistence.SequenceGenerator
        <%_ } _%>
import javax.persistence.Table
    <%_ } _%>
<%_ } _%>
import javax.validation.constraints.NotNull
import java.io.Serializable
import java.time.Instant

<%_ if (databaseType === 'couchbase') { _%>
import <%= packageName %>.config.ID_DELIMITER
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE

<%_ } _%>
/**
 * Persist AuditEvent managed by the Spring Boot actuator.
 *
 * @see org.springframework.boot.actuate.audit.AuditEvent
 */
 <%_ if (databaseType === 'sql') { _%>
    <%_ if (!reactive) { _%>
@Entity
@Table(name = "<%= jhiTablePrefix %>_persistent_audit_event")
    <%_ } else { _%>
@Table("<%= jhiTablePrefix %>_persistent_audit_event")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
@Document(collection = "<%= jhiTablePrefix %>_persistent_audit_event")
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
@Node("<%= jhiTablePrefix %>_persistent_audit_event")
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
@Document
<%_ } _%>
data class PersistentAuditEvent(

    @Id
    <%_ if (databaseType === 'sql') { _%>
        <%_ if (!reactive) { _%>
            <%_ if (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb') { _%>
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid2")
            <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
            <%_ } _%>
        <%_ } _%>
    @Column(<% if (!reactive) { %>name = <% } %>"event_id")
    var id: String? = null,
    <%_ } else { _%>
        <%_ if (databaseType === 'couchbase') { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
        <%_ } else if (databaseType === 'neo4j') { _%>
    @Property("event_id")
    @GeneratedValue(UUIDStringGenerator::class)
        <%_ } _%>
    var id: String? = null,
    <%_ } _%>

    @field:NotNull
    <%_ if (databaseType === 'sql' && !reactive) { _%>
    @Column(nullable = false)
    <%_ } _%>
    var principal: String? = null,

    <%_ if (databaseType === 'sql') { _%>
    @Column(<% if (!reactive) { %>name = <% } %>"event_date")
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("event_date")
    <%_ } else if (databaseType === 'neo4j') { _%>
    @Property("event_date")
    <%_ } _%>
    var auditEventDate: Instant? = null,

    <%_ if (databaseType === 'sql') { _%>
    @Column(<% if (!reactive) { %>name = <% } %>"event_type")
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("event_type")
    <%_ } else if (databaseType === 'neo4j') { _%>
    @Property("event_type")
    <%_ } _%>
    var auditEventType: String? = null,

    <%_ if (databaseType === 'sql') { _%>
        <%_ if (!reactive) { _%>
    @ElementCollection
    @MapKeyColumn(name = "name")
    @Column(name = "value")
    @CollectionTable(name = "<%= jhiTablePrefix %>_persistent_audit_evt_data", joinColumns = [JoinColumn(name="event_id")])
        <%_ } else { _%>
    @Transient
        <%_ } _%>
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Transient
    <%_ } _%>
    var data: MutableMap<String, String?> = mutableMapOf()

) : Serializable {

<%_ if (databaseType === 'sql' && reactive) { _%>
    @PersistenceConstructor
    constructor(
        id: Long?,
        principal: String?,
        auditEventDate: Instant?,
        auditEventType: String?
    ): this(id, principal, auditEventDate, auditEventType, mutableMapOf<String, String?>())
<%_ } _%>

<%_ if (databaseType === 'couchbase') { _%>

    @IdPrefix
    private val prefix: String = PREFIX
<%_ } _%>

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is PersistentAuditEvent) return false
        if (other.id == null || id == null) return false

        return id == other.id
    }

    override fun hashCode() = 31

    override fun toString() = "PersistentAuditEvent{" +
        "principal='" + principal + '\'' +
        ", auditEventDate=" + auditEventDate +
        ", auditEventType='" + auditEventType + '\'' +
        '}'

    companion object {
        private const val serialVersionUID = 1L
        <%_ if (databaseType === 'couchbase') { _%>

        const val PREFIX = "audit"
        <%_ } _%>
    }
}
